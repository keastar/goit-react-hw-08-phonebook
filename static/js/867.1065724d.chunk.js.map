{"version":3,"file":"static/js/867.1065724d.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","webpack://react-homework-template/./src/components/Form/Form.module.css?89ba","redux/contacts/selectors.js","components/Form/Form.js","components/Filter/Filter.js","components/ContactList/ContactList.js","views/ContactsView.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactList_form__YbZHX\",\"contactList\":\"ContactList_contactList__UFVCg\",\"contactList_item\":\"ContactList_contactList_item__463w8\",\"contactList_item_label\":\"ContactList_contactList_item_label__WXFIS\",\"contactList_item_label_spin\":\"ContactList_contactList_item_label_spin__FZQ+v\",\"btn\":\"ContactList_btn__6Piat\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Form_form__e1yzW\",\"request\":\"Form_request__ocAQY\",\"label\":\"Form_label__8nx+5\",\"label_input\":\"Form_label_input__jAjQc\",\"button\":\"Form_button__8NOIT\"};","export const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilterContact = state => state.filters.filter;\n","import React from 'react';\nimport css from './Form.module.css';\nimport { Input, Button } from '@chakra-ui/react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../../redux/contacts/operations';\nimport { selectContacts } from '../../redux/contacts/selectors';\n\nexport const Form = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.target;\n    const name = form.name.value;\n    const number = form.number.value;\n\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      return alert('Already exist contact');\n    }\n    dispatch(addContact({ name, number }));\n    form.reset();\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <label className={css.label}>\n        Name:\n        <Input\n          placeholder=\"Enter your Name\"\n          size=\"sm\"\n          variant=\"flushed\"\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          className={css.label_input}\n        />\n      </label>\n      <label className={css.label}>\n        tel:\n        <Input\n          placeholder=\"Enter your number\"\n          size=\"sm\"\n          variant=\"flushed\"\n          type=\"tel\"\n          name=\"number\"\n          className={css.label_input}\n        />\n      </label>\n      <Button\n        type=\"submit\"\n        color=\"rgb(68, 68, 68)\"\n        backgroundColor=\"rgb(255, 255, 255)\"\n        size=\"md\"\n        height=\"35px\"\n        width=\"150px\"\n        margin=\"14px auto 16px\"\n        borderRadius=\"35px\"\n        display=\"flex\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n      >\n        Add contact\n      </Button>\n    </form>\n  );\n};\n","import React from 'react';\nimport css from '../ContactList/ContactList.module.css';\nimport { useDispatch } from 'react-redux';\nimport { Input } from '@chakra-ui/react';\n// import { selectFilterContact } from 'redux/selectors';\nimport { setFilterContacts } from '../../redux/contacts/filterSlice';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  // const filter = useSelector(selectFilterContact);\n\n  const handleFilter = event => {\n    dispatch(setFilterContacts(event.target.value));\n  };\n\n  return (\n    <label className={css.contactList_item_label}>\n      Фильтр по имени:{' '}\n      {/* <input type=\"text\" name=\"filter\" onChange={handleFilter} /> */}\n      <Input\n        size=\"md\"\n        variant=\"outline\"\n        backgroundColor=\"white\"\n        type=\"text\"\n        name=\"filter\"\n        onChange={handleFilter}\n      />\n    </label>\n  );\n};\n\nexport default Filter;\n","import React from 'react';\nimport css from './ContactList.module.css';\nimport { Button } from '@chakra-ui/react';\nimport { deleteContact } from '../../redux/contacts/operations';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from '../../redux/contacts/selectors';\nimport { selectFilterContact } from '../../redux/contacts/selectors';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filterValue = useSelector(selectFilterContact).toLowerCase();\n  const dispatch = useDispatch();\n\n  const handleDelete = event => {\n    dispatch(deleteContact(event.target.id));\n  };\n\n  const getVisibleContacts = () => {\n    if (!filterValue || filterValue === '') {\n      return contacts;\n    }\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filterValue)\n    );\n  };\n\n  const visibleContacts = getVisibleContacts();\n\n  return (\n    <form className={css.form}>\n      {contacts && (\n        <ul className={css.contactList}>\n          {visibleContacts.map(({ id, name, number }) => (\n            <li key={id} className={css.contactList_item}>\n              <p>\n                {name} {number}\n              </p>\n              <Button\n                type=\"button\"\n                className={css.btn}\n                id={id}\n                onClick={handleDelete}\n                // colorScheme=\"blue\"\n                size=\"sm\"\n                height=\"30px\"\n                width=\"65px\"\n                borderRadius=\"35px\"\n                display=\"flex\"\n                justifyContent=\"center\"\n                alignItems=\"center\"\n              >\n                Delete\n              </Button>\n            </li>\n          ))}\n        </ul>\n      )}\n    </form>\n  );\n};\n","import React from 'react';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport css from '../components/ContactList/ContactList.module.css';\nimport { Form } from '../components/Form/Form';\nimport Filter from '../components/Filter/Filter';\nimport { fetchContacts } from '../redux/contacts/operations';\nimport { selectIsLoading } from '../redux/contacts/selectors';\nimport { ContactList } from '../components/ContactList/ContactList';\nimport { Spinner } from '@chakra-ui/react';\n\nexport default function ContactsView() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Form />\n      <Filter />\n      <div className={css.contactList_item_label_spin}>\n        {isLoading ? (\n          <Spinner\n            thickness=\"4px\"\n            speed=\"0.65s\"\n            emptyColor=\"gray.200\"\n            color=\"blue.500\"\n            size=\"lg\"\n          />\n        ) : (\n          <ContactList />\n        )}\n      </div>\n    </>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectFilterContact","filters","filter","Form","dispatch","useDispatch","useSelector","_jsxs","className","css","onSubmit","event","preventDefault","form","target","name","value","number","find","contact","toLowerCase","alert","addContact","reset","children","_jsx","Input","placeholder","size","variant","type","pattern","title","required","Button","color","backgroundColor","height","width","margin","borderRadius","display","justifyContent","alignItems","contactList_item_label","onChange","setFilterContacts","ContactList","filterValue","handleDelete","deleteContact","id","visibleContacts","includes","contactList","map","_ref","contactList_item","btn","onClick","ContactsView","useEffect","fetchContacts","_Fragment","Filter","contactList_item_label_spin","Spinner","thickness","speed","emptyColor"],"sourceRoot":""}